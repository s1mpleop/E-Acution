package com.subham.auction.service.impl;

import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.subham.auction.entity.Bids;
import com.subham.auction.entity.Buyer;
import com.subham.auction.entity.Product;
import com.subham.auction.exception.ResourceNotFoundException;
import com.subham.auction.payloads.BidsDto;
import com.subham.auction.repository.BidsRepo;
import com.subham.auction.repository.BuyerRepo;
import com.subham.auction.repository.ProductRepo;
import com.subham.auction.service.BidsService;

@Service
public class BidsServiceImpl implements BidsService {

	@Autowired
	private BidsRepo bidsRepo;
	
	@Autowired
	private ModelMapper modelMapper;
	
	@Autowired
	private BuyerRepo buyerRepo;
	
	@Autowired
	private ProductRepo productRepo;
	
	@Override
	public BidsDto createBids(BidsDto bidsDto, Long buyerId, Long productId) {
		

		Buyer buyer = this.buyerRepo.findById(buyerId).orElseThrow(() -> new ResourceNotFoundException("Buyer","Buyer id", buyerId));
		
		Product product = this.productRepo.findById(productId).orElseThrow(() -> new ResourceNotFoundException("Product", "Product id", productId));
		
		Bids bids = this.modelMapper.map(bidsDto, Bids.class);
		
		bids.setBuyer(buyer);
		bids.setProduct(product);
		
		Bids newBid = this.bidsRepo.save(bids);
		return this.modelMapper.map(newBid, BidsDto.class);
	}

	@Override
	public BidsDto updateBids(BidsDto bidsDto, Long bidId) {
		Bids bid = this.bidsRepo.findById(bidId).orElseThrow(() -> new ResourceNotFoundException("Bid", "Bid id", bidId));
		bid.setBidAmount(bidsDto.getBidAmount());
		Bids updatedBid = this.bidsRepo.save(bid); 
		return this.modelMapper.map(updatedBid, BidsDto.class);
	}

	@Override
	public void deleteBid(Long bidId) {
		Bids bid = this.bidsRepo.findById(bidId).orElseThrow(() -> new ResourceNotFoundException("Bid", "Bid id", bidId));
		this.bidsRepo.delete(bid);
	}

	@Override
	public List<BidsDto> getAllBids() {
		List<Bids> bids = this.bidsRepo.findAll();
		List<BidsDto> bidDtos = bids.stream().map((bid) ->  this.modelMapper.map(bid, BidsDto.class)).collect(Collectors.toList());
		return bidDtos;
	}

	@Override
	public List<BidsDto> getBidsByBuyer(Long buyerId) {
		Buyer buyer = this.buyerRepo.findById(buyerId).orElseThrow(() -> new ResourceNotFoundException("Buyer","Buyer id", buyerId));
		List<Bids> bids = this.bidsRepo.findByBuyer(buyer);
		List<BidsDto> bidDtos = bids.stream().map((bid) ->  this.modelMapper.map(bid, BidsDto.class)).collect(Collectors.toList());
		return bidDtos;
	}

	@Override
	public List<BidsDto> getBidsByProduct(Long productId) {
		Product product = this.productRepo.findById(productId).orElseThrow(() -> new ResourceNotFoundException("Product", "Product id", productId));
		List<Bids> bids = this.bidsRepo.findByProduct(product);
		List<BidsDto> bidDtos = bids.stream().map((bid) ->  this.modelMapper.map(bid, BidsDto.class)).collect(Collectors.toList());
		return bidDtos;
	}

}
